extends ./layouts/master.pug
include ./mixins/form-outline.pug
block header 
  header Header

block content
  div.container
    section.main-map
      .main-filter-list.main-map__action-area
        .main-filter-list__item 
          #forte-map-legends  

      .aspect-ratio--16x9.main-map__map-canvas
        .aspect-ratio__inner-content 
          div.forte-map.interactive-map(data-map-styles="./js/data/map.style.json" data-markers="./js/data/markers.json", 
            data-ground-overlays=[
            {"coordinates":{"S": 38.92836424033743, "W": 8.924896661531204, "N": 38.94287213966831, "E": 8.937440372730721}, 
            "zoomLevel": 16,
            "maxZoomLevel": 18,
            "overlay": "images/MAPNEWNEWNEW.jpg"},
            {"coordinates":{"S": 38.92836424033743, "W": 8.924896661531204, "N": 38.94287213966831, "E": 8.937440372730721}, 
            "zoomLevel": 18,
            "overlay": "images/Offset-2.png"
            },
            {"coordinates":{"S": 38.92836424033743, "W": 8.92, "N": 38.94287213966831, "E": 8.924896661531204}, 
            "zoomLevel": 16,
            "overlay": "images/Offset-2.png"
            },
          ], data-map-options={
            zoom: 17, 
            center: { lat:  38.93240924257542, lng: 8.931271334750678},
            minZoom: 16,
            maxZoom: 20,
            navigationModeZoom: 18,
            restriction: {
              latLngBounds: {
                north: 38.94287213966831,
                south: 38.92836424033743,
                east: 8.945,
                west: 8.91,
              },
              strictBounds: false,                     
            },
            disableDefaultUI: true,
            zoomControl: true
          }, 
          data-locale={"Go to": "vai al sito", "Close" : "vicino", "Search": "Search", "Navigation": "Navigation", "No origin selected": "Please click on the marker to select origin"},
          
          data-append-legends-to="#forte-map-legends"
          data-navigation="true",
          data-roads = "./js/data/roads.json",
          data-options={
            "disableAllMarkersOnNavigationSelect": false
          }
        )
    .container 
      div#map-navigation
  .container 
    .d-flex 
      .col-auto
        label.mt-2.d-block(for="map-options-text")  Map Options
        textarea.form-control#map-options-text(name="" autocomplete="off" spellcheck="false" cols="80" rows="20" value="") {zoom: 16, center: { lat:  38.93240924257542, lng: 8.931271334750678},minZoom: 16,maxZoom: 19,restriction: {latLngBounds: {north: 38.94287213966831,south: 38.92836424033743,east: 8.945,west: 8.91,},strictBounds: false, },disableDefaultUI: true,zoomControl: true}
      .col-auto    
        label.mt-2.d-block(for="overlay-options-text")  Overlay Options
        textarea.form-control#overlay-options-text(name="" autocomplete="off" spellcheck="false" cols="80" rows="20" value="") [{coordinates:{S:38.92836424033743,W:8.924896661531204,N:38.94287213966831,E:8.937440372730721},zoomLevel:16,overlay:"./images/MAPNEWNEWNEW.jpg"},{coordinates:{S:38.92836424033743,W:8.92,N:38.94287213966831,E:8.924896661531204},zoomLevel:16,overlay:"./images/Offset-2.png"}]
    
    
    

    .aspect-ratio--16x9 
      .aspect-ratio__inner-content#map-preview
    p.mt-2 HTML Code Preview
    pre#map-html-preview.mt-2


  .container 
    h2 Editor tool 
    #inputFields
    div
      button.btn(onclick="addOverlay()") Add Overlay
      button.btn(onclick="saveOverlay()") Save Overlay
      button.btn(onclick="addGroundOverlayObj()") Generate from ground overlay ontop
    pre#preview
block footer
  footer footer
block scripts 
  script. 
    window.moduleChunks = {"utilities": ['maps']}
    window.addEventListener('load', function() {
      previewMap()
    })

    function previewMap() {
      const previewWindow = document.querySelector('#map-preview')
      const mapOptionsTextArea = document.querySelector('#map-options-text')
      const overlayOptionsTextArea = document.querySelector('#overlay-options-text')
      const mapHtmlPreview = document.querySelector('#map-html-preview')
      let mapOptions = {
        zoom: 16, 
        center: { lat:  38.93240924257542, lng: 8.931271334750678},
        minZoom: 16,
        maxZoom: 19,
        restriction: {
          latLngBounds: {
            north: 38.94287213966831,
            south: 38.92836424033743,
            east: 8.945,
            west: 8.91,
          },
          strictBounds: false,                     
        },
        disableDefaultUI: true,
        zoomControl: true
      }

      let groundOverlays = [{"coordinates":{"S":38.92836424033743,"W":8.91,"N":38.94287213966831,"E":8.945},
                                    "zoomLevel":16, "overlay":"images/map_zlvl_17.jpg"},
                                    {"coordinates":{"S":38.92836424033743,"W":8.924896661581204,"N":38.94287213966831,"E":8.93744037274072},
                                    "zoomLevel":18,"overlay":"images/map_zlvl_18.webp"}];

      updateInputAreas();
      
      updatePreviewEditor();

      function optionsParser(textInp) {
        try {
          let value = textInp.value;
          let json = null;

          try {
            json = JSON.parse(value)
          } catch (jsonError) {
            try {
                const evalFunction = new Function(`return ${value}`)
                json = evalFunction();
                
            } catch (evalError) {
                return false
            }
          }
          return JSON.stringify(json, null, 2)
        } catch (error) {
          return false
        }

      }

      function updateInputAreas() {
        if(getToken('mapoptions')) mapOptionsTextArea.value = getToken('mapoptions')
        if(getToken('overlayoptions')) overlayOptionsTextArea.value = getToken('overlayoptions')
      }

      function updatePreviewEditor() {
        mapOptions = optionsParser(mapOptionsTextArea)
        groundOverlays = optionsParser(overlayOptionsTextArea)
        saveToken('mapoptions', mapOptionsTextArea.value)
        saveToken('overlayoptions', overlayOptionsTextArea.value)
        createMapHtml()
        
      }

      function createMapHtml() {
        previewWindow.innerHTML = '';
        const mapDiv  = document.createElement('div')
        mapDiv.classList.add('interactive-map')
        mapDiv.dataset.groundOverlays = groundOverlays
        mapDiv.dataset.mapOptions = mapOptions
        mapDiv.dataset.mapStyles = "./js/data/map.style.json"

        mapHtmlPreview.textContent = `${mapDiv.outerHTML}`
        previewWindow.appendChild(mapDiv)
        new MapController.ForteVillageMap(mapDiv, {
          editorMode: true
        })
      }

      function debounce(func, wait, immediate) {
        var timeout;
        return function () {
            var context = this,
                args = arguments;
            var later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        }
      }

      function getToken(key) {
        return window.localStorage.getItem(key);
      }

      function saveToken(key, token) {
        window.localStorage.setItem(key, token)
      }

      function destroyToken(key) {
        window.localStorage.removeItem(key)
      }

      mapOptionsTextArea.addEventListener('input', debounce(updatePreviewEditor, 500, false))
      overlayOptionsTextArea.addEventListener('input', debounce(updatePreviewEditor, 500, false))

    }



    let overlayObjects = [];
    // Function to create input fields for one object
    function createOverlayInputFields(objects) {
        const container = document.getElementById('inputFields');
        
        // Clear the container's inner HTML
        container.innerHTML = '';

        // Iterate over each object in the overlayObjects array
        objects.forEach((object, index) => {
            const inputSection = document.createElement('div');
            inputSection.style.padding = '20px';
            inputSection.style.border = '1px solid';

            for (const key in object) {
                const label = document.createElement('label');
                label.classList.add('d-block');
                label.style.marginBottom = '10px';
                const input = document.createElement('input');
                input.classList.add('d-block');
                input.setAttribute('type', 'text');
                input.style.marginBottom = '10px';

                if (typeof object[key] === 'object') {
                    for (const subKey in object[key]) {
                        const subLabel = document.createElement('label');
                        subLabel.innerHTML = `${key}.${subKey}`;
                        const subInput = document.createElement('input');
                        subInput.setAttribute('type', 'text');
                        subInput.setAttribute('placeholder', `${key}.${subKey}`);
                        subInput.value = object[key][subKey];
                        inputSection.appendChild(subLabel);
                        inputSection.appendChild(subInput);
                    }
                } else {
                    input.setAttribute('placeholder', key);
                    input.value = object[key];
                    label.innerHTML = `${key}`;
                    inputSection.appendChild(label);
                    inputSection.appendChild(input);
                }
            }

            // Append the input section to the container
            container.appendChild(inputSection);
        });
    }

    // Function to add a new object
    function addOverlay(obj = null) {
        if(!obj) {
          overlayObjects.push({"coordinates":{"S": 38.92836424033743, "W": 8.924896661531204, "N": 38.94287213966831, "E": 8.937440372730721}, 
          "zoomLevel": 16,
          "maxZoomLevel": 18,
          "overlay": "./images/MAPNEWNEWNEW.jpg"}
          );
        } else {
          overlayObjects.push(obj)
        }
        
        createOverlayInputFields(overlayObjects);
    }

    function addGroundOverlayObj() {
      const overlayTextAreaValue = document.querySelector('#overlay-options-text').value.trim()
      overlayObjects = [];
      try{
        const correctedJSON = overlayTextAreaValue.replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g, '"$2": ');
        const parsedJson = JSON.parse(correctedJSON)
        overlayObjects = parsedJson
      }catch(err) {
        console.log(err)
      }
      createOverlayInputFields(overlayObjects);
    }

    // Function to save objects
    function saveOverlay() {
      const preview = document.getElementById('preview');
      
      // Array to store the overlay objects
      const overlayObjects = [];
      
      // Get all input sections
      const inputSections = document.querySelectorAll('#inputFields > div');

      // Iterate over each input section
      inputSections.forEach((inputSection, index) => {
          const overlayObject = {};
          
          // Get all input fields within the current input section
          const inputs = inputSection.querySelectorAll('input');

          // Iterate over each input field
          inputs.forEach((input) => {
              const key = input.getAttribute('placeholder');
              const value = input.value;
              
              // Skip empty values
              if (value.trim() !== '') {
                  // Split the key into its parts (if applicable)
                  const keys = key.split('.');
                  
                  // Construct the object using the key parts
                  let currentObject = overlayObject;
                  for (let i = 0; i < keys.length - 1; i++) {
                      const k = keys[i];
                      currentObject[k] = currentObject[k] || {};
                      currentObject = currentObject[k];
                  }
                  currentObject[keys[keys.length - 1]] = value;
              }
          });
          
          // Add the constructed overlay object to the array
          overlayObjects.push(overlayObject);
      });
      
      // Display the generated JSON string in the preview div
      preview.innerHTML = JSON.stringify(overlayObjects, null, 2);
    }